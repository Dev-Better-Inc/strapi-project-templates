# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = ComponentAtomsButton | ComponentAtomsEntry | ComponentAtomsLink | ComponentAtomsNumeric | ComponentAtomsParagraph | ComponentAtomsText | ComponentMoleculesMap | ComponentMoleculesMenu | ComponentOrganismsArticle | ComponentOrganismsPage | ComponentOrganismsSection | ContactFormRequest | ContactFormRequestAggregator | ContactFormRequestConnection | ContactFormRequestConnectionBudget | ContactFormRequestConnectionEmail | ContactFormRequestConnectionId | ContactFormRequestConnectionMessage | ContactFormRequestConnectionName | ContactFormRequestGroupBy | ContentBlock | ContentBlockAggregator | ContentBlockConnection | ContentBlockConnectionButton | ContentBlockConnectionDescription | ContentBlockConnectionId | ContentBlockConnectionLocale | ContentBlockConnectionSection | ContentBlockConnectionSlug | ContentBlockConnectionTitle | ContentBlockGroupBy | Country | CountryAggregator | CountryConnection | CountryConnectionCode | CountryConnectionId | CountryConnectionName | CountryGroupBy | EmailDesignerEmailTemplate | I18NLocale | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreated_at | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionLastName | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | Website | WebsiteAggregator | WebsiteConnection | WebsiteConnectionDomain | WebsiteConnectionId | WebsiteGroupBy | createContactFormRequestPayload | createContentBlockPayload | createCountryPayload | createRolePayload | createUserPayload | createWebsitePayload | deleteContactFormRequestPayload | deleteContentBlockPayload | deleteCountryPayload | deleteFilePayload | deleteRolePayload | deleteUserPayload | deleteWebsitePayload | updateContactFormRequestPayload | updateContentBlockPayload | updateCountryPayload | updateRolePayload | updateUserPayload | updateWebsitePayload

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type ComponentAtomsButton {
  id: ID!
  link: ComponentAtomsLink
  simpleIcon: String
}

"Key-Value entry"
type ComponentAtomsEntry {
  id: ID!
  key: String!
  value: String
}

type ComponentAtomsLink {
  id: ID!
  text: String!
  title: String
  url: String!
}

type ComponentAtomsNumeric {
  id: ID!
  unit: String
  value: Float!
}

type ComponentAtomsParagraph {
  id: ID!
  lines: [ComponentAtomsText]
}

"Text node"
type ComponentAtomsText {
  id: ID!
  value: String!
}

"Collection<Entry>"
type ComponentMoleculesMap {
  entries: [ComponentAtomsEntry]
  id: ID!
  slug: String!
}

type ComponentMoleculesMenu {
  id: ID!
  links: [ComponentAtomsLink]
  slug: String!
}

"Content building block - defines section, slides, rows and columns and link or button"
type ComponentOrganismsArticle {
  cards: [ComponentOrganismsSection]
  entries: [ComponentAtomsEntry]
  id: ID!
  link: ComponentAtomsLink
  section: ComponentOrganismsSection
  slug: String!
}

type ComponentOrganismsPage {
  id: ID!
  meta: [ComponentAtomsEntry]
  uri: String!
}

type ComponentOrganismsSection {
  active: Boolean
  backgroundColor: String
  description: String
  id: ID!
  media: UploadFile
  slug: String
  subDescription: String
  subTitle: String
  text: String
  title: String
}

type ContactFormRequest {
  budget: String
  email: String!
  id: ID!
  message: String
  name: String
}

type ContactFormRequestAggregator {
  count: Int
  totalCount: Int
}

type ContactFormRequestConnection {
  aggregate: ContactFormRequestAggregator
  groupBy: ContactFormRequestGroupBy
  values: [ContactFormRequest]
}

type ContactFormRequestConnectionBudget {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionEmail {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionId {
  connection: ContactFormRequestConnection
  key: ID
}

type ContactFormRequestConnectionMessage {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionName {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestGroupBy {
  budget: [ContactFormRequestConnectionBudget]
  email: [ContactFormRequestConnectionEmail]
  id: [ContactFormRequestConnectionId]
  message: [ContactFormRequestConnectionMessage]
  name: [ContactFormRequestConnectionName]
}

type ContentBlock {
  button: ComponentAtomsButton
  cards: [ComponentOrganismsSection]
  description: String
  entries: [ComponentMoleculesMap]
  id: ID!
  locale: String
  localizations(limit: Int, sort: String, start: Int, where: JSON): [ContentBlock]
  section: ComponentOrganismsSection
  slug: String!
  title: String!
}

type ContentBlockAggregator {
  count: Int
  totalCount: Int
}

type ContentBlockConnection {
  aggregate: ContentBlockAggregator
  groupBy: ContentBlockGroupBy
  values: [ContentBlock]
}

type ContentBlockConnectionButton {
  connection: ContentBlockConnection
  key: ID
}

type ContentBlockConnectionDescription {
  connection: ContentBlockConnection
  key: String
}

type ContentBlockConnectionId {
  connection: ContentBlockConnection
  key: ID
}

type ContentBlockConnectionLocale {
  connection: ContentBlockConnection
  key: String
}

type ContentBlockConnectionSection {
  connection: ContentBlockConnection
  key: ID
}

type ContentBlockConnectionSlug {
  connection: ContentBlockConnection
  key: String
}

type ContentBlockConnectionTitle {
  connection: ContentBlockConnection
  key: String
}

type ContentBlockGroupBy {
  button: [ContentBlockConnectionButton]
  description: [ContentBlockConnectionDescription]
  id: [ContentBlockConnectionId]
  locale: [ContentBlockConnectionLocale]
  section: [ContentBlockConnectionSection]
  slug: [ContentBlockConnectionSlug]
  title: [ContentBlockConnectionTitle]
}

type Country {
  code: String!
  id: ID!
  name: String!
}

type CountryAggregator {
  count: Int
  totalCount: Int
}

type CountryConnection {
  aggregate: CountryAggregator
  groupBy: CountryGroupBy
  values: [Country]
}

type CountryConnectionCode {
  connection: CountryConnection
  key: String
}

type CountryConnectionId {
  connection: CountryConnection
  key: ID
}

type CountryConnectionName {
  connection: CountryConnection
  key: String
}

type CountryGroupBy {
  code: [CountryConnectionCode]
  id: [CountryConnectionId]
  name: [CountryConnectionName]
}

type EmailDesignerEmailTemplate {
  bodyHtml: String
  bodyText: String
  created_at: DateTime!
  design: JSON
  enabled: Boolean
  id: ID!
  name: String
  subject: String
  tags: JSON
  updated_at: DateTime!
}

type I18NLocale {
  code: String
  created_at: DateTime!
  id: ID!
  name: String
  updated_at: DateTime!
}

type Mutation {
  createContactFormRequest(input: createContactFormRequestInput): createContactFormRequestPayload
  createContentBlock(input: createContentBlockInput): createContentBlockPayload
  createContentBlockLocalization(input: updateContentBlockInput!): ContentBlock!
  createCountry(input: createCountryInput): createCountryPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  createWebsite(input: createWebsiteInput): createWebsitePayload
  deleteContactFormRequest(input: deleteContactFormRequestInput): deleteContactFormRequestPayload
  deleteContentBlock(input: deleteContentBlockInput): deleteContentBlockPayload
  deleteCountry(input: deleteCountryInput): deleteCountryPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  deleteWebsite(input: deleteWebsiteInput): deleteWebsitePayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateContactFormRequest(input: updateContactFormRequestInput): updateContactFormRequestPayload
  updateContentBlock(input: updateContentBlockInput): updateContentBlockPayload
  updateCountry(input: updateCountryInput): updateCountryPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  updateWebsite(input: updateWebsiteInput): updateWebsitePayload
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
  contactFormRequest(id: ID!, publicationState: PublicationState): ContactFormRequest
  contactFormRequests(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [ContactFormRequest]
  contactFormRequestsConnection(limit: Int, sort: String, start: Int, where: JSON): ContactFormRequestConnection
  contentBlock(id: ID!, publicationState: PublicationState): ContentBlock
  contentBlocks(limit: Int, locale: String, publicationState: PublicationState, sort: String, start: Int, where: JSON): [ContentBlock]
  contentBlocksConnection(limit: Int, locale: String, sort: String, start: Int, where: JSON): ContentBlockConnection
  countries(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Country]
  countriesConnection(limit: Int, sort: String, start: Int, where: JSON): CountryConnection
  country(id: ID!, publicationState: PublicationState): Country
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
  website(id: ID!, publicationState: PublicationState): Website
  websites(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Website]
  websitesConnection(limit: Int, sort: String, start: Int, where: JSON): WebsiteConnection
}

type UploadFile {
  alternativeText: String
  caption: String
  created_at: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updated_at: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreated_at {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdated_at {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileGroupBy {
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  created_at: [UploadFileConnectionCreated_at]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updated_at: [UploadFileConnectionUpdated_at]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleGroupBy {
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  created_at: DateTime!
  email: String!
  firstName: String
  id: ID!
  lastName: String
  role: UsersPermissionsRole
  updated_at: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionCreated_at {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionFirstName {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionLastName {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserGroupBy {
  created_at: [UsersPermissionsUserConnectionCreated_at]
  email: [UsersPermissionsUserConnectionEmail]
  firstName: [UsersPermissionsUserConnectionFirstName]
  id: [UsersPermissionsUserConnectionId]
  lastName: [UsersPermissionsUserConnectionLastName]
  role: [UsersPermissionsUserConnectionRole]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
}

type Website {
  domain: String!
  id: ID!
  navigation: [ComponentMoleculesMenu]
  seo: [ComponentMoleculesMap]
}

type WebsiteAggregator {
  count: Int
  totalCount: Int
}

type WebsiteConnection {
  aggregate: WebsiteAggregator
  groupBy: WebsiteGroupBy
  values: [Website]
}

type WebsiteConnectionDomain {
  connection: WebsiteConnection
  key: String
}

type WebsiteConnectionId {
  connection: WebsiteConnection
  key: ID
}

type WebsiteGroupBy {
  domain: [WebsiteConnectionDomain]
  id: [WebsiteConnectionId]
}

type createContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type createContentBlockPayload {
  contentBlock: ContentBlock
}

type createCountryPayload {
  country: Country
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type createWebsitePayload {
  website: Website
}

type deleteContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type deleteContentBlockPayload {
  contentBlock: ContentBlock
}

type deleteCountryPayload {
  country: Country
}

type deleteFilePayload {
  file: UploadFile
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type deleteWebsitePayload {
  website: Website
}

type updateContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type updateContentBlockPayload {
  contentBlock: ContentBlock
}

type updateCountryPayload {
  country: Country
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

type updateWebsitePayload {
  website: Website
}

enum PublicationState {
  LIVE
  PREVIEW
}

input ComponentAtomsButtonInput {
  link: ComponentAtomsLinkInput!
  simpleIcon: String
}

input ComponentAtomsEntryInput {
  key: String!
  value: String
}

input ComponentAtomsLinkInput {
  text: String!
  title: String
  url: String!
}

input ComponentAtomsNumericInput {
  unit: String
  value: Float!
}

input ComponentAtomsParagraphInput {
  lines: [ComponentAtomsTextInput]
}

input ComponentAtomsTextInput {
  value: String!
}

input ComponentMoleculesMapInput {
  entries: [ComponentAtomsEntryInput!]
  slug: String!
}

input ComponentMoleculesMenuInput {
  links: [ComponentAtomsLinkInput]
  slug: String
}

input ComponentOrganismsArticleInput {
  cards: [ComponentOrganismsSectionInput!]
  entries: [ComponentAtomsEntryInput]
  link: ComponentAtomsLinkInput
  section: ComponentOrganismsSectionInput!
  slug: String!
}

input ComponentOrganismsPageInput {
  meta: [ComponentAtomsEntryInput]
  uri: String!
}

input ComponentOrganismsSectionInput {
  active: Boolean
  backgroundColor: String
  description: String
  media: ID
  slug: String
  subDescription: String
  subTitle: String
  text: String
  title: String
}

input ContactFormRequestInput {
  budget: String
  created_by: ID
  email: String!
  message: String
  name: String
  updated_by: ID
}

input ContentBlockInput {
  button: ComponentAtomsButtonInput
  cards: [ComponentOrganismsSectionInput]
  created_by: ID
  description: String
  entries: [ComponentMoleculesMapInput]
  locale: String
  localizations: [ID]
  published_at: DateTime
  section: ComponentOrganismsSectionInput
  slug: String!
  title: String!
  updated_by: ID
}

input CountryInput {
  code: String!
  created_by: ID
  name: String!
  updated_by: ID
}

input EmailTemplateInput {
  bodyHtml: String
  bodyText: String
  created_by: ID
  design: JSON
  enabled: Boolean
  name: String
  subject: String
  tags: JSON
  updated_by: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input InputID {
  id: ID!
}

input LocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  firstName: String
  lastName: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input WebsiteInput {
  created_by: ID
  domain: String!
  navigation: [ComponentMoleculesMenuInput]
  seo: [ComponentMoleculesMapInput!]
  updated_by: ID
}

input createContactFormRequestInput {
  data: ContactFormRequestInput
}

input createContentBlockInput {
  data: ContentBlockInput
}

input createCountryInput {
  data: CountryInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input createWebsiteInput {
  data: WebsiteInput
}

input deleteContactFormRequestInput {
  where: InputID
}

input deleteContentBlockInput {
  where: InputID
}

input deleteCountryInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input deleteWebsiteInput {
  where: InputID
}

input editComponentAtomsButtonInput {
  id: ID
  link: editComponentAtomsLinkInput
  simpleIcon: String
}

input editComponentAtomsEntryInput {
  id: ID
  key: String
  value: String
}

input editComponentAtomsLinkInput {
  id: ID
  text: String
  title: String
  url: String
}

input editComponentAtomsNumericInput {
  id: ID
  unit: String
  value: Float
}

input editComponentAtomsParagraphInput {
  id: ID
  lines: [editComponentAtomsTextInput]
}

input editComponentAtomsTextInput {
  id: ID
  value: String
}

input editComponentMoleculesMapInput {
  entries: [editComponentAtomsEntryInput]
  id: ID
  slug: String
}

input editComponentMoleculesMenuInput {
  id: ID
  links: [editComponentAtomsLinkInput]
  slug: String
}

input editComponentOrganismsArticleInput {
  cards: [editComponentOrganismsSectionInput]
  entries: [editComponentAtomsEntryInput]
  id: ID
  link: editComponentAtomsLinkInput
  section: editComponentOrganismsSectionInput
  slug: String
}

input editComponentOrganismsPageInput {
  id: ID
  meta: [editComponentAtomsEntryInput]
  uri: String
}

input editComponentOrganismsSectionInput {
  active: Boolean
  backgroundColor: String
  description: String
  id: ID
  media: ID
  slug: String
  subDescription: String
  subTitle: String
  text: String
  title: String
}

input editContactFormRequestInput {
  budget: String
  created_by: ID
  email: String
  message: String
  name: String
  updated_by: ID
}

input editContentBlockInput {
  button: editComponentAtomsButtonInput
  cards: [editComponentOrganismsSectionInput]
  created_by: ID
  description: String
  entries: [editComponentMoleculesMapInput]
  locale: String
  localizations: [ID]
  published_at: DateTime
  section: editComponentOrganismsSectionInput
  slug: String
  title: String
  updated_by: ID
}

input editCountryInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input editEmailTemplateInput {
  bodyHtml: String
  bodyText: String
  created_by: ID
  design: JSON
  enabled: Boolean
  name: String
  subject: String
  tags: JSON
  updated_by: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editLocaleInput {
  code: String
  created_by: ID
  name: String
  updated_by: ID
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  firstName: String
  lastName: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input editWebsiteInput {
  created_by: ID
  domain: String
  navigation: [editComponentMoleculesMenuInput]
  seo: [editComponentMoleculesMapInput]
  updated_by: ID
}

input updateContactFormRequestInput {
  data: editContactFormRequestInput
  where: InputID
}

input updateContentBlockInput {
  data: editContentBlockInput
  where: InputID
}

input updateCountryInput {
  data: editCountryInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

input updateWebsiteInput {
  data: editWebsiteInput
  where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
