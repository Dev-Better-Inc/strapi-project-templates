"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

enum PublicationState {
  LIVE
  PREVIEW
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentDataEntryFiltersInput {
  key: StringFilterInput
  value: StringFilterInput
  and: [ComponentDataEntryFiltersInput]
  or: [ComponentDataEntryFiltersInput]
  not: ComponentDataEntryFiltersInput
}

type ComponentDataEntry {
  id: ID!
  key: String
  value: String!
}

type ComponentDataSet {
  id: ID!
  value: String!
}

type ComponentIntegrationAddress {
  id: ID!
  country: String
  region: String
  city: String
  street: String!
  unit: String
  zipCode: String!
}

input ComponentIntegrationStripeInput {
  id: ID
  stripeId: String
  payload: JSON
}

type ComponentIntegrationStripe {
  id: ID!
  stripeId: String!
  payload: JSON
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
  Facebook
  Twitter
}

input ComponentSharedMetaSocialFiltersInput {
  socialNetwork: StringFilterInput
  title: StringFilterInput
  description: StringFilterInput
  and: [ComponentSharedMetaSocialFiltersInput]
  or: [ComponentSharedMetaSocialFiltersInput]
  not: ComponentSharedMetaSocialFiltersInput
}

input ComponentSharedMetaSocialInput {
  id: ID
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK
  title: String
  description: String
  image: ID
}

type ComponentSharedMetaSocial {
  id: ID!
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
  title: String!
  description: String!
  image: UploadFileEntityResponse
}

input ComponentSharedSeoInput {
  id: ID
  metaTitle: String
  metaDescription: String
  metaImage: ID
  metaSocial: [ComponentSharedMetaSocialInput]
  keywords: String
  metaRobots: String
  structuredData: JSON
  metaViewport: String
  canonicalURL: String
}

type ComponentSharedSeo {
  id: ID!
  metaTitle: String!
  metaDescription: String
  metaImage: UploadFileEntityResponse
  metaSocial(filters: ComponentSharedMetaSocialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedMetaSocial]
  keywords: String
  metaRobots: String
  structuredData: JSON
  metaViewport: String
  canonicalURL: String
}

input ComponentUiCardFiltersInput {
  title: StringFilterInput
  subtitle: StringFilterInput
  description: StringFilterInput
  and: [ComponentUiCardFiltersInput]
  or: [ComponentUiCardFiltersInput]
  not: ComponentUiCardFiltersInput
}

type ComponentUiCard {
  id: ID!
  title: String
  subtitle: String
  description: String
  media: UploadFileEntityResponse
}

type ComponentUiGrid {
  id: ID!
  visible: Boolean!
  children(filters: ComponentDataEntryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentDataEntry]!
}

input ComponentUiLinkFiltersInput {
  url: StringFilterInput
  title: StringFilterInput
  and: [ComponentUiLinkFiltersInput]
  or: [ComponentUiLinkFiltersInput]
  not: ComponentUiLinkFiltersInput
}

type ComponentUiLink {
  id: ID!
  url: String!
  title: String
}

type ComponentUiMenu {
  id: ID!
  visible: Boolean!
  children(filters: ComponentUiLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiLink]!
}

input ComponentUiParagraphFiltersInput {
  value: StringFilterInput
  and: [ComponentUiParagraphFiltersInput]
  or: [ComponentUiParagraphFiltersInput]
  not: ComponentUiParagraphFiltersInput
}

type ComponentUiParagraph {
  id: ID!
  value: String!
}

type ComponentUiSection {
  id: ID!
  visible: Boolean!
  heading: ComponentUiCard
  children(filters: ComponentUiCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiCard]
  button: ComponentUiLink
}

type ComponentUiTab {
  id: ID!
  name: String!
  pane: ComponentUiCard!
}

type ComponentUiText {
  id: ID!
  visible: Boolean!
  children(filters: ComponentUiParagraphFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiParagraph]!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  sitemap_exclude: Boolean
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  customer: CustomerFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  customer: ID
  sitemap_exclude: Boolean
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  customer: CustomerEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input EmailDesignerEmailTemplateFiltersInput {
  id: IDFilterInput
  templateReferenceId: IntFilterInput
  design: JSONFilterInput
  name: StringFilterInput
  subject: StringFilterInput
  bodyHtml: StringFilterInput
  bodyText: StringFilterInput
  enabled: BooleanFilterInput
  tags: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [EmailDesignerEmailTemplateFiltersInput]
  or: [EmailDesignerEmailTemplateFiltersInput]
  not: EmailDesignerEmailTemplateFiltersInput
}

input EmailDesignerEmailTemplateInput {
  templateReferenceId: Int
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  sitemap_exclude: Boolean
}

type EmailDesignerEmailTemplate {
  templateReferenceId: Int
  design: JSON
  name: String
  subject: String
  bodyHtml: String
  bodyText: String
  enabled: Boolean
  tags: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

type EmailDesignerEmailTemplateEntity {
  id: ID
  attributes: EmailDesignerEmailTemplate
}

type EmailDesignerEmailTemplateEntityResponse {
  data: EmailDesignerEmailTemplateEntity
}

type EmailDesignerEmailTemplateEntityResponseCollection {
  data: [EmailDesignerEmailTemplateEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_GRAPHSBUILDERGRAPH_TYPE {
  pie
  bar
  line
  dateLine
}

input GraphsBuilderGraphFiltersInput {
  id: IDFilterInput
  title: StringFilterInput
  type: StringFilterInput
  collectionX: StringFilterInput
  collectionXAttribute: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [GraphsBuilderGraphFiltersInput]
  or: [GraphsBuilderGraphFiltersInput]
  not: GraphsBuilderGraphFiltersInput
}

input GraphsBuilderGraphInput {
  title: String
  type: ENUM_GRAPHSBUILDERGRAPH_TYPE
  collectionX: String
  collectionXAttribute: String
  sitemap_exclude: Boolean
}

type GraphsBuilderGraph {
  title: String!
  type: ENUM_GRAPHSBUILDERGRAPH_TYPE!
  collectionX: String!
  collectionXAttribute: String
  createdAt: DateTime
  updatedAt: DateTime
}

type GraphsBuilderGraphEntity {
  id: ID
  attributes: GraphsBuilderGraph
}

type GraphsBuilderGraphEntityResponse {
  data: GraphsBuilderGraphEntity
}

type GraphsBuilderGraphEntityResponseCollection {
  data: [GraphsBuilderGraphEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactUsInput {
  seo: ComponentSharedSeoInput
  pathname: String
  sitemap_exclude: Boolean
}

type ContactUs {
  seo: ComponentSharedSeo
  pathname: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type ContactUsEntity {
  id: ID
  attributes: ContactUs
}

type ContactUsEntityResponse {
  data: ContactUsEntity
}

input CustomerFiltersInput {
  id: IDFilterInput
  firstName: StringFilterInput
  lastName: StringFilterInput
  uuid: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [CustomerFiltersInput]
  or: [CustomerFiltersInput]
  not: CustomerFiltersInput
}

input CustomerInput {
  firstName: String
  lastName: String
  stripe: ComponentIntegrationStripeInput
  uuid: String
  sitemap_exclude: Boolean
}

type Customer {
  firstName: String
  lastName: String
  uuid: String
  createdAt: DateTime
  updatedAt: DateTime
  id: ID
}

type CustomerEntity {
  id: ID
  attributes: Customer
}

type CustomerEntityResponse {
  data: CustomerEntity
}

type CustomerEntityResponseCollection {
  data: [CustomerEntity!]!
  meta: ResponseCollectionMeta!
}

type Homepage {
  hero: ComponentUiCard
  seo: ComponentSharedSeo
  pathname: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type HomepageEntity {
  id: ID
  attributes: Homepage
}

type HomepageEntityResponse {
  data: HomepageEntity
}

input OrderFiltersInput {
  id: IDFilterInput
  items: OrderLineFiltersInput
  uuid: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [OrderFiltersInput]
  or: [OrderFiltersInput]
  not: OrderFiltersInput
}

input OrderInput {
  stripe: ComponentIntegrationStripeInput
  items: [ID]
  uuid: String
  sitemap_exclude: Boolean
}

type Order {
  items(filters: OrderLineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderLineRelationResponseCollection
  uuid: String
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderEntity {
  id: ID
  attributes: Order
}

type OrderEntityResponse {
  data: OrderEntity
}

type OrderEntityResponseCollection {
  data: [OrderEntity!]!
  meta: ResponseCollectionMeta!
}

input OrderLineFiltersInput {
  id: IDFilterInput
  quantity: IntFilterInput
  product: ProductFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [OrderLineFiltersInput]
  or: [OrderLineFiltersInput]
  not: OrderLineFiltersInput
}

input OrderLineInput {
  quantity: Int
  product: ID
  sitemap_exclude: Boolean
}

type OrderLine {
  quantity: Int!
  product: ProductEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderLineEntity {
  id: ID
  attributes: OrderLine
}

type OrderLineEntityResponse {
  data: OrderLineEntity
}

type OrderLineEntityResponseCollection {
  data: [OrderLineEntity!]!
  meta: ResponseCollectionMeta!
}

type OrderLineRelationResponseCollection {
  data: [OrderLineEntity!]!
}

input ProductFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  uuid: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  sitemap_exclude: BooleanFilterInput
  and: [ProductFiltersInput]
  or: [ProductFiltersInput]
  not: ProductFiltersInput
}

input ProductInput {
  name: String
  stripe: ComponentIntegrationStripeInput
  uuid: String
  publishedAt: DateTime
  sitemap_exclude: Boolean
}

type Product {
  name: String!
  uuid: String
  createdAt: DateTime
  updatedAt: DateTime
  publishedAt: DateTime
}

type ProductEntity {
  id: ID
  attributes: Product
}

type ProductEntityResponse {
  data: ProductEntity
}

type ProductEntityResponseCollection {
  data: [ProductEntity!]!
  meta: ResponseCollectionMeta!
}

union GenericMorph = ComponentDataEntry | ComponentDataSet | ComponentIntegrationAddress | ComponentIntegrationStripe | ComponentSharedMetaSocial | ComponentSharedSeo | ComponentUiCard | ComponentUiGrid | ComponentUiLink | ComponentUiMenu | ComponentUiParagraph | ComponentUiSection | ComponentUiTab | ComponentUiText | UploadFile | I18NLocale | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser | EmailDesignerEmailTemplate | GraphsBuilderGraph | ContactUs | Customer | Homepage | Order | OrderLine | Product

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type NavigationItem {
  id: Int!
  title: String!
  type: String!
  path: String
  externalPath: String
  uiRouterKey: String!
  menuAttached: Boolean!
  order: Int!
  parent: Int
  master: Int
  items: [NavigationItem]
  related: [NavigationRelated]
  audience: [String]
  created_at: String
  updated_at: String
  created_by: String
  updated_by: String
  createdAt: String
  updatedAt: String
  createdBy: String
  updatedBy: String
}

type NavigationRelated {
  id: Int
  title: String
  name: String
}

enum NavigationRenderType {
  FLAT
  TREE
  RFR
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
  emailDesignerEmailTemplate(id: ID): EmailDesignerEmailTemplateEntityResponse
  emailDesignerEmailTemplates(filters: EmailDesignerEmailTemplateFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): EmailDesignerEmailTemplateEntityResponseCollection
  graphsBuilderGraph(id: ID): GraphsBuilderGraphEntityResponse
  graphsBuilderGraphs(filters: GraphsBuilderGraphFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): GraphsBuilderGraphEntityResponseCollection
  contactUs: ContactUsEntityResponse
  customer(id: ID): CustomerEntityResponse
  customers(filters: CustomerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CustomerEntityResponseCollection
  homepage: HomepageEntityResponse
  order(id: ID): OrderEntityResponse
  orders(filters: OrderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderEntityResponseCollection
  orderLine(id: ID): OrderLineEntityResponse
  orderLines(filters: OrderLineFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OrderLineEntityResponseCollection
  product(id: ID): ProductEntityResponse
  products(filters: ProductFiltersInput, pagination: PaginationArg = {}, sort: [String] = [], publicationState: PublicationState = LIVE): ProductEntityResponseCollection
  renderNavigationChild(id: String!, childUiKey: String!, type: NavigationRenderType, menuOnly: Boolean): [NavigationItem]!
  renderNavigation(navigationIdOrSlug: String!, type: NavigationRenderType, menuOnly: Boolean): [NavigationItem]!
  me: Customer
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createEmailDesignerEmailTemplate(data: EmailDesignerEmailTemplateInput!): EmailDesignerEmailTemplateEntityResponse
  updateEmailDesignerEmailTemplate(id: ID!, data: EmailDesignerEmailTemplateInput!): EmailDesignerEmailTemplateEntityResponse
  deleteEmailDesignerEmailTemplate(id: ID!): EmailDesignerEmailTemplateEntityResponse
  createGraphsBuilderGraph(data: GraphsBuilderGraphInput!): GraphsBuilderGraphEntityResponse
  updateGraphsBuilderGraph(id: ID!, data: GraphsBuilderGraphInput!): GraphsBuilderGraphEntityResponse
  deleteGraphsBuilderGraph(id: ID!): GraphsBuilderGraphEntityResponse
  updateContactUs(data: ContactUsInput!): ContactUsEntityResponse
  deleteContactUs: ContactUsEntityResponse
  createCustomer(data: CustomerInput!): CustomerEntityResponse
  updateCustomer(id: ID!, data: CustomerInput!): CustomerEntityResponse
  deleteCustomer(id: ID!): CustomerEntityResponse
  createOrder(data: OrderInput!): OrderEntityResponse
  updateOrder(id: ID!, data: OrderInput!): OrderEntityResponse
  deleteOrder(id: ID!): OrderEntityResponse
  createOrderLine(data: OrderLineInput!): OrderLineEntityResponse
  updateOrderLine(id: ID!, data: OrderLineInput!): OrderLineEntityResponse
  deleteOrderLine(id: ID!): OrderLineEntityResponse
  createProduct(data: ProductInput!): ProductEntityResponse
  updateProduct(id: ID!, data: ProductInput!): ProductEntityResponse
  deleteProduct(id: ID!): ProductEntityResponse
  upload(refId: ID, ref: String, field: String, info: FileInfoInput, file: Upload!): UploadFileEntityResponse!
  multipleUpload(refId: ID, ref: String, field: String, files: [Upload]!): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Update an existing role"""
  updateUsersPermissionsRole(id: ID!, data: UsersPermissionsRoleInput!): UsersPermissionsUpdateRolePayload

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  updateUsersPermissionsUser(id: ID!, data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!

  """Update an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
