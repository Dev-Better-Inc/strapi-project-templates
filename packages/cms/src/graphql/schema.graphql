### This file was generated by Nexus Schema
### Do not make changes to this file directly

schema {
  query: Query
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Category {
  createdAt: DateTime
  name: String!
  posts(
    filters: PostFiltersInput
    pagination: PaginationArg = {}
    publicationState: PublicationState = LIVE
    sort: [String] = []
  ): PostRelationResponseCollection
  seo: ComponentSharedSeo
  slug: String!
  updatedAt: DateTime
}

type CategoryEntity {
  attributes: Category
  id: ID
}

type CategoryEntityResponse {
  data: CategoryEntity
}

type CategoryEntityResponseCollection {
  data: [CategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input CategoryFiltersInput {
  and: [CategoryFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: CategoryFiltersInput
  or: [CategoryFiltersInput]
  posts: PostFiltersInput
  seo: ComponentSharedSeoFiltersInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CategoryInput {
  name: String
  posts: [ID]
  seo: ComponentSharedSeoInput
  sitemap_exclude: Boolean
  slug: String
}

type CategoryRelationResponseCollection {
  data: [CategoryEntity!]!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

type ComponentDataContact {
  address: String
  email: String
  id: ID!
  phone: String
}

input ComponentDataContactFiltersInput {
  address: StringFilterInput
  and: [ComponentDataContactFiltersInput]
  email: StringFilterInput
  not: ComponentDataContactFiltersInput
  or: [ComponentDataContactFiltersInput]
  phone: StringFilterInput
}

input ComponentDataContactInput {
  address: String
  email: String
  id: ID
  phone: String
}

type ComponentDataEntry {
  id: ID!
  key: String
  value: String!
}

input ComponentDataEntryFiltersInput {
  and: [ComponentDataEntryFiltersInput]
  key: StringFilterInput
  not: ComponentDataEntryFiltersInput
  or: [ComponentDataEntryFiltersInput]
  value: StringFilterInput
}

input ComponentDataEntryInput {
  id: ID
  key: String
  value: String
}

type ComponentDataSet {
  id: ID!
  value: String!
}

input ComponentDataSetFiltersInput {
  and: [ComponentDataSetFiltersInput]
  not: ComponentDataSetFiltersInput
  or: [ComponentDataSetFiltersInput]
  value: StringFilterInput
}

input ComponentDataSetInput {
  id: ID
  value: String
}

type ComponentPageContactUs {
  contact: ComponentDataContact
  id: ID!
  pathname: String!
}

input ComponentPageContactUsFiltersInput {
  and: [ComponentPageContactUsFiltersInput]
  contact: ComponentDataContactFiltersInput
  not: ComponentPageContactUsFiltersInput
  or: [ComponentPageContactUsFiltersInput]
  pathname: StringFilterInput
}

input ComponentPageContactUsInput {
  contact: ComponentDataContactInput
  id: ID
  pathname: String
}

type ComponentPageHome {
  features(filters: ComponentUiCardFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiCard]
  hero: ComponentUiCard
  id: ID!
  pathname: String!
}

input ComponentPageHomeFiltersInput {
  and: [ComponentPageHomeFiltersInput]
  features: ComponentUiCardFiltersInput
  hero: ComponentUiCardFiltersInput
  not: ComponentPageHomeFiltersInput
  or: [ComponentPageHomeFiltersInput]
  pathname: StringFilterInput
}

input ComponentPageHomeInput {
  features: [ComponentUiCardInput]
  hero: ComponentUiCardInput
  id: ID
  pathname: String
}

type ComponentSharedMetaSocial {
  description: String!
  id: ID!
  image: UploadFileEntityResponse
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK!
  title: String!
}

input ComponentSharedMetaSocialFiltersInput {
  and: [ComponentSharedMetaSocialFiltersInput]
  description: StringFilterInput
  not: ComponentSharedMetaSocialFiltersInput
  or: [ComponentSharedMetaSocialFiltersInput]
  socialNetwork: StringFilterInput
  title: StringFilterInput
}

input ComponentSharedMetaSocialInput {
  description: String
  id: ID
  image: ID
  socialNetwork: ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK
  title: String
}

type ComponentSharedSeo {
  canonicalURL: String
  id: ID!
  keywords: String
  metaDescription: String
  metaImage: UploadFileEntityResponse
  metaRobots: String
  metaSocial(filters: ComponentSharedMetaSocialFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentSharedMetaSocial]
  metaTitle: String!
  metaViewport: String
  structuredData: JSON
}

input ComponentSharedSeoFiltersInput {
  and: [ComponentSharedSeoFiltersInput]
  canonicalURL: StringFilterInput
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaRobots: StringFilterInput
  metaSocial: ComponentSharedMetaSocialFiltersInput
  metaTitle: StringFilterInput
  metaViewport: StringFilterInput
  not: ComponentSharedSeoFiltersInput
  or: [ComponentSharedSeoFiltersInput]
  structuredData: JSONFilterInput
}

input ComponentSharedSeoInput {
  canonicalURL: String
  id: ID
  keywords: String
  metaDescription: String
  metaImage: ID
  metaRobots: String
  metaSocial: [ComponentSharedMetaSocialInput]
  metaTitle: String
  metaViewport: String
  structuredData: JSON
}

type ComponentUiCard {
  description: String
  id: ID!
  media: UploadFileEntityResponse
  subtitle: String
  title: String
}

input ComponentUiCardFiltersInput {
  and: [ComponentUiCardFiltersInput]
  description: StringFilterInput
  not: ComponentUiCardFiltersInput
  or: [ComponentUiCardFiltersInput]
  subtitle: StringFilterInput
  title: StringFilterInput
}

input ComponentUiCardInput {
  description: String
  id: ID
  media: ID
  subtitle: String
  title: String
}

type ComponentUiGrid {
  children(filters: ComponentDataEntryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentDataEntry]!
  id: ID!
  visible: Boolean!
}

input ComponentUiGridFiltersInput {
  and: [ComponentUiGridFiltersInput]
  children: ComponentDataEntryFiltersInput
  not: ComponentUiGridFiltersInput
  or: [ComponentUiGridFiltersInput]
  visible: BooleanFilterInput
}

input ComponentUiGridInput {
  children: [ComponentDataEntryInput]
  id: ID
  visible: Boolean
}

type ComponentUiHeadline {
  id: ID!
  subtitle: String
  title: String
}

input ComponentUiHeadlineFiltersInput {
  and: [ComponentUiHeadlineFiltersInput]
  not: ComponentUiHeadlineFiltersInput
  or: [ComponentUiHeadlineFiltersInput]
  subtitle: StringFilterInput
  title: StringFilterInput
}

input ComponentUiHeadlineInput {
  id: ID
  subtitle: String
  title: String
}

type ComponentUiLink {
  id: ID!
  title: String
  url: String!
}

input ComponentUiLinkFiltersInput {
  and: [ComponentUiLinkFiltersInput]
  not: ComponentUiLinkFiltersInput
  or: [ComponentUiLinkFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentUiLinkInput {
  id: ID
  title: String
  url: String
}

type ComponentUiParagraph {
  id: ID!
  value: String!
}

input ComponentUiParagraphFiltersInput {
  and: [ComponentUiParagraphFiltersInput]
  not: ComponentUiParagraphFiltersInput
  or: [ComponentUiParagraphFiltersInput]
  value: StringFilterInput
}

input ComponentUiParagraphInput {
  id: ID
  value: String
}

type ComponentUiSection {
  button: ComponentUiLink
  heading: ComponentUiCard
  id: ID!
  visible: Boolean!
}

input ComponentUiSectionFiltersInput {
  and: [ComponentUiSectionFiltersInput]
  button: ComponentUiLinkFiltersInput
  heading: ComponentUiCardFiltersInput
  not: ComponentUiSectionFiltersInput
  or: [ComponentUiSectionFiltersInput]
  visible: BooleanFilterInput
}

input ComponentUiSectionInput {
  button: ComponentUiLinkInput
  heading: ComponentUiCardInput
  id: ID
  visible: Boolean
}

type ComponentUiTab {
  id: ID!
  name: String!
  pane: ComponentUiCard!
}

input ComponentUiTabFiltersInput {
  and: [ComponentUiTabFiltersInput]
  name: StringFilterInput
  not: ComponentUiTabFiltersInput
  or: [ComponentUiTabFiltersInput]
  pane: ComponentUiCardFiltersInput
}

input ComponentUiTabInput {
  id: ID
  name: String
  pane: ComponentUiCardInput
}

type ComponentUiText {
  children(filters: ComponentUiParagraphFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUiParagraph]!
  id: ID!
  visible: Boolean!
}

input ComponentUiTextFiltersInput {
  and: [ComponentUiTextFiltersInput]
  children: ComponentUiParagraphFiltersInput
  not: ComponentUiTextFiltersInput
  or: [ComponentUiTextFiltersInput]
  visible: BooleanFilterInput
}

input ComponentUiTextInput {
  children: [ComponentUiParagraphInput]
  id: ID
  visible: Boolean
}

type Contact {
  createdAt: DateTime
  email: String!
  name: String!
  subject: String
  text: String
  updatedAt: DateTime
}

type ContactEntity {
  attributes: Contact
  id: ID
}

type ContactEntityResponse {
  data: ContactEntity
}

type ContactEntityResponseCollection {
  data: [ContactEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactFiltersInput {
  and: [ContactFiltersInput]
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: ContactFiltersInput
  or: [ContactFiltersInput]
  sitemap_exclude: BooleanFilterInput
  subject: StringFilterInput
  text: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContactInput {
  email: String
  name: String
  sitemap_exclude: Boolean
  subject: String
  text: String
}

type ContactRelationResponseCollection {
  data: [ContactEntity!]!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTSHAREDMETASOCIAL_SOCIALNETWORK {
  Facebook
  Twitter
}

enum ENUM_EMAILDESIGNEREMAILTEMPLATE_NAME {
  contact_form
}

enum ENUM_MENUSMENUITEM_TARGET {
  blank
  parent
  self
  top
}

type EmailDesignerEmailTemplate {
  bodyHtml: String
  bodyText: String
  createdAt: DateTime
  design: JSON
  enabled: Boolean
  name: ENUM_EMAILDESIGNEREMAILTEMPLATE_NAME
  subject: String
  tags: JSON
  templateReferenceId: Int
  updatedAt: DateTime
}

type EmailDesignerEmailTemplateEntity {
  attributes: EmailDesignerEmailTemplate
  id: ID
}

type EmailDesignerEmailTemplateEntityResponse {
  data: EmailDesignerEmailTemplateEntity
}

type EmailDesignerEmailTemplateEntityResponseCollection {
  data: [EmailDesignerEmailTemplateEntity!]!
  meta: ResponseCollectionMeta!
}

input EmailDesignerEmailTemplateFiltersInput {
  and: [EmailDesignerEmailTemplateFiltersInput]
  bodyHtml: StringFilterInput
  bodyText: StringFilterInput
  createdAt: DateTimeFilterInput
  design: JSONFilterInput
  enabled: BooleanFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: EmailDesignerEmailTemplateFiltersInput
  or: [EmailDesignerEmailTemplateFiltersInput]
  sitemap_exclude: BooleanFilterInput
  subject: StringFilterInput
  tags: JSONFilterInput
  templateReferenceId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input EmailDesignerEmailTemplateInput {
  bodyHtml: String
  bodyText: String
  design: JSON
  enabled: Boolean
  name: ENUM_EMAILDESIGNEREMAILTEMPLATE_NAME
  sitemap_exclude: Boolean
  subject: String
  tags: JSON
  templateReferenceId: Int
}

type EmailDesignerEmailTemplateRelationResponseCollection {
  data: [EmailDesignerEmailTemplateEntity!]!
}

type EmailEmitterEmail {
  createdAt: DateTime
  delivered: Boolean!
  email: String
  log: String
  payload: JSON
  publishedAt: DateTime
  scheduled: Boolean!
  template: EmailDesignerEmailTemplateEntityResponse
  updatedAt: DateTime
}

type EmailEmitterEmailEntity {
  attributes: EmailEmitterEmail
  id: ID
}

type EmailEmitterEmailEntityResponse {
  data: EmailEmitterEmailEntity
}

type EmailEmitterEmailEntityResponseCollection {
  data: [EmailEmitterEmailEntity!]!
  meta: ResponseCollectionMeta!
}

input EmailEmitterEmailFiltersInput {
  and: [EmailEmitterEmailFiltersInput]
  createdAt: DateTimeFilterInput
  delivered: BooleanFilterInput
  email: StringFilterInput
  id: IDFilterInput
  log: StringFilterInput
  not: EmailEmitterEmailFiltersInput
  or: [EmailEmitterEmailFiltersInput]
  payload: JSONFilterInput
  publishedAt: DateTimeFilterInput
  scheduled: BooleanFilterInput
  sitemap_exclude: BooleanFilterInput
  template: EmailDesignerEmailTemplateFiltersInput
  updatedAt: DateTimeFilterInput
}

input EmailEmitterEmailInput {
  delivered: Boolean
  email: String
  log: String
  payload: JSON
  publishedAt: DateTime
  scheduled: Boolean
  sitemap_exclude: Boolean
  template: ID
}

type EmailEmitterEmailRelationResponseCollection {
  data: [EmailEmitterEmailEntity!]!
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph =
    Category
  | ComponentDataContact
  | ComponentDataEntry
  | ComponentDataSet
  | ComponentPageContactUs
  | ComponentPageHome
  | ComponentSharedMetaSocial
  | ComponentSharedSeo
  | ComponentUiCard
  | ComponentUiGrid
  | ComponentUiHeadline
  | ComponentUiLink
  | ComponentUiParagraph
  | ComponentUiSection
  | ComponentUiTab
  | ComponentUiText
  | Contact
  | EmailDesignerEmailTemplate
  | EmailEmitterEmail
  | I18NLocale
  | MenusMenu
  | MenusMenuItem
  | Post
  | UploadFile
  | UploadFolder
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Website

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""
A string used to identify an i18n locale
"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type MenusMenu {
  createdAt: DateTime
  items(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemRelationResponseCollection
  slug: String!
  title: String!
  updatedAt: DateTime
}

type MenusMenuEntity {
  attributes: MenusMenu
  id: ID
}

type MenusMenuEntityResponse {
  data: MenusMenuEntity
}

type MenusMenuEntityResponseCollection {
  data: [MenusMenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenusMenuFiltersInput {
  and: [MenusMenuFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  items: MenusMenuItemFiltersInput
  not: MenusMenuFiltersInput
  or: [MenusMenuFiltersInput]
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input MenusMenuInput {
  items: [ID]
  sitemap_exclude: Boolean
  slug: String
  title: String
}

type MenusMenuItem {
  createdAt: DateTime
  order: Int
  parent: MenusMenuItemEntityResponse
  root_menu: MenusMenuEntityResponse!
  target: ENUM_MENUSMENUITEM_TARGET
  title: String!
  updatedAt: DateTime
  url: String
}

type MenusMenuItemEntity {
  attributes: MenusMenuItem
  id: ID
}

type MenusMenuItemEntityResponse {
  data: MenusMenuItemEntity
}

type MenusMenuItemEntityResponseCollection {
  data: [MenusMenuItemEntity!]!
  meta: ResponseCollectionMeta!
}

input MenusMenuItemFiltersInput {
  and: [MenusMenuItemFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: MenusMenuItemFiltersInput
  or: [MenusMenuItemFiltersInput]
  order: IntFilterInput
  parent: MenusMenuItemFiltersInput
  root_menu: MenusMenuFiltersInput
  sitemap_exclude: BooleanFilterInput
  target: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input MenusMenuItemInput {
  order: Int
  parent: ID
  root_menu: ID
  sitemap_exclude: Boolean
  target: ENUM_MENUSMENUITEM_TARGET
  title: String
  url: String
}

type MenusMenuItemRelationResponseCollection {
  data: [MenusMenuItemEntity!]!
}

type MenusMenuRelationResponseCollection {
  data: [MenusMenuEntity!]!
}

type Mutation {
  changePassword(input: ChangePasswordInput): Boolean!
  createContact(data: ContactInput!): ContactEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse

  """
  Create a new role
  """
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """
  Create a new user
  """
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  createWebsiteLocalization(data: WebsiteInput, id: ID, locale: I18NLocaleCode): WebsiteEntityResponse
  deleteContact(id: ID!): ContactEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse

  """
  Delete an existing role
  """
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """
  Delete an existing user
  """
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """
  Confirm an email users email address
  """
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """
  Request a reset password token
  """
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """
  Register a user
  """
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateContact(data: ContactInput!, id: ID!): ContactEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse

  """
  Update an existing role
  """
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """
  Update an existing user
  """
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Post {
  background: String
  category: CategoryEntityResponse
  content: String
  cover: UploadFileEntityResponse
  createdAt: DateTime
  name: String!
  publishedAt: DateTime
  seo: ComponentSharedSeo
  slug: String!
  teaser: String
  updatedAt: DateTime
  uuid: String!
}

type PostEntity {
  attributes: Post
  id: ID
}

type PostEntityResponse {
  data: PostEntity
}

type PostEntityResponseCollection {
  data: [PostEntity!]!
  meta: ResponseCollectionMeta!
}

input PostFiltersInput {
  and: [PostFiltersInput]
  background: StringFilterInput
  category: CategoryFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: PostFiltersInput
  or: [PostFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: ComponentSharedSeoFiltersInput
  sitemap_exclude: BooleanFilterInput
  slug: StringFilterInput
  teaser: StringFilterInput
  updatedAt: DateTimeFilterInput
  uuid: StringFilterInput
}

input PostInput {
  background: String
  category: ID
  content: String
  cover: ID
  name: String
  publishedAt: DateTime
  seo: ComponentSharedSeoInput
  sitemap_exclude: Boolean
  slug: String
  teaser: String
  uuid: String
}

type PostRelationResponseCollection {
  data: [PostEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  categories(filters: CategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CategoryEntityResponseCollection
  category(id: ID): CategoryEntityResponse
  emailDesignerEmailTemplate(id: ID): EmailDesignerEmailTemplateEntityResponse
  emailDesignerEmailTemplates(
    filters: EmailDesignerEmailTemplateFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): EmailDesignerEmailTemplateEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsUser
  menusMenu(id: ID): MenusMenuEntityResponse
  menusMenuItem(id: ID): MenusMenuItemEntityResponse
  menusMenuItems(filters: MenusMenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuItemEntityResponseCollection
  menusMenus(filters: MenusMenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenusMenuEntityResponseCollection
  post(id: ID): PostEntityResponse
  posts(filters: PostFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PostEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  website(locale: I18NLocaleCode): WebsiteEntityResponse
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""
A time string with format HH:mm:ss.SSS
"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  sitemap_exclude: BooleanFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  sitemap_exclude: Boolean
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
  sitemap_exclude: Boolean
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  id: ID!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  sitemap_exclude: BooleanFilterInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  sitemap_exclude: Boolean
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

type Website {
  content: [WebsiteContentDynamicZone]
  createdAt: DateTime
  locale: String
  localizations: WebsiteRelationResponseCollection
  seo: ComponentSharedSeo
  translations(filters: ComponentDataEntryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentDataEntry]
  updatedAt: DateTime
}

union WebsiteContentDynamicZone = ComponentPageContactUs | ComponentPageHome | Error

scalar WebsiteContentDynamicZoneInput

type WebsiteEntity {
  attributes: Website
  id: ID
}

type WebsiteEntityResponse {
  data: WebsiteEntity
}

type WebsiteEntityResponseCollection {
  data: [WebsiteEntity!]!
  meta: ResponseCollectionMeta!
}

input WebsiteFiltersInput {
  and: [WebsiteFiltersInput]
  createdAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: WebsiteFiltersInput
  not: WebsiteFiltersInput
  or: [WebsiteFiltersInput]
  seo: ComponentSharedSeoFiltersInput
  sitemap_exclude: BooleanFilterInput
  translations: ComponentDataEntryFiltersInput
  updatedAt: DateTimeFilterInput
}

input WebsiteInput {
  content: [WebsiteContentDynamicZoneInput!]
  seo: ComponentSharedSeoInput
  sitemap_exclude: Boolean
  translations: [ComponentDataEntryInput]
}

type WebsiteRelationResponseCollection {
  data: [WebsiteEntity!]!
}
