# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph =
    ComponentAtomsCover
  | ComponentAtomsEntry
  | ComponentAtomsMarkdown
  | ComponentAtomsText
  | ComponentMoleculesLink
  | ComponentMoleculesMap
  | ComponentMoleculesParagraph
  | ContactFormRequest
  | ContactFormRequestAggregator
  | ContactFormRequestConnection
  | ContactFormRequestConnectionCreatedAt
  | ContactFormRequestConnectionEmail
  | ContactFormRequestConnectionId
  | ContactFormRequestConnectionMessage
  | ContactFormRequestConnectionName
  | ContactFormRequestConnectionUpdatedAt
  | ContactFormRequestConnection_id
  | ContactFormRequestGroupBy
  | UploadFile
  | UploadFileAggregator
  | UploadFileAggregatorAvg
  | UploadFileAggregatorMax
  | UploadFileAggregatorMin
  | UploadFileAggregatorSum
  | UploadFileConnection
  | UploadFileConnectionAlternativeText
  | UploadFileConnectionCaption
  | UploadFileConnectionCreatedAt
  | UploadFileConnectionExt
  | UploadFileConnectionFormats
  | UploadFileConnectionHash
  | UploadFileConnectionHeight
  | UploadFileConnectionId
  | UploadFileConnectionMime
  | UploadFileConnectionName
  | UploadFileConnectionPreviewUrl
  | UploadFileConnectionProvider
  | UploadFileConnectionProvider_metadata
  | UploadFileConnectionSize
  | UploadFileConnectionUpdatedAt
  | UploadFileConnectionUrl
  | UploadFileConnectionWidth
  | UploadFileConnection_id
  | UploadFileGroupBy
  | UserPermissionsPasswordPayload
  | UsersPermissionsLoginPayload
  | UsersPermissionsMe
  | UsersPermissionsMeRole
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsRoleAggregator
  | UsersPermissionsRoleConnection
  | UsersPermissionsRoleConnectionDescription
  | UsersPermissionsRoleConnectionId
  | UsersPermissionsRoleConnectionName
  | UsersPermissionsRoleConnectionType
  | UsersPermissionsRoleConnection_id
  | UsersPermissionsRoleGroupBy
  | UsersPermissionsUser
  | UsersPermissionsUserAggregator
  | UsersPermissionsUserConnection
  | UsersPermissionsUserConnectionCreatedAt
  | UsersPermissionsUserConnectionEmail
  | UsersPermissionsUserConnectionFirstName
  | UsersPermissionsUserConnectionId
  | UsersPermissionsUserConnectionLastName
  | UsersPermissionsUserConnectionRole
  | UsersPermissionsUserConnectionUpdatedAt
  | UsersPermissionsUserConnectionUsername
  | UsersPermissionsUserConnection_id
  | UsersPermissionsUserGroupBy
  | createContactFormRequestPayload
  | createRolePayload
  | createUserPayload
  | deleteContactFormRequestPayload
  | deleteFilePayload
  | deleteRolePayload
  | deleteUserPayload
  | updateContactFormRequestPayload
  | updateRolePayload
  | updateUserPayload

type AdminUser {
  firstname: String!
  id: ID!
  lastname: String!
  username: String
}

type ComponentAtomsCover {
  _id: ID!
  backgroundColor: String!
  id: ID!
  image: UploadFile
}

"Key-Value entry"
type ComponentAtomsEntry {
  _id: ID!
  id: ID!
  key: String!
  value: String!
}

type ComponentAtomsMarkdown {
  _id: ID!
  id: ID!
  properties: JSON
  value: String
}

"Text node"
type ComponentAtomsText {
  _id: ID!
  id: ID!
  properties: JSON
  title: String!
}

type ComponentMoleculesLink {
  _id: ID!
  icon: UploadFile
  id: ID!
  role: ENUM_COMPONENTMOLECULESLINK_ROLE
  title: ComponentAtomsText
  url: String!
}

"Collection<Entry>"
type ComponentMoleculesMap {
  _id: ID!
  children: [ComponentAtomsEntry]
  id: ID!
}

type ComponentMoleculesParagraph {
  _id: ID!
  children: [ComponentAtomsText]
  id: ID!
}

type ContactFormRequest {
  _id: ID!
  createdAt: DateTime!
  email: String!
  id: ID!
  message: String
  name: String!
  updatedAt: DateTime!
}

type ContactFormRequestAggregator {
  count: Int
  totalCount: Int
}

type ContactFormRequestConnection {
  aggregate: ContactFormRequestAggregator
  groupBy: ContactFormRequestGroupBy
  values: [ContactFormRequest]
}

type ContactFormRequestConnectionCreatedAt {
  connection: ContactFormRequestConnection
  key: DateTime
}

type ContactFormRequestConnectionEmail {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionId {
  connection: ContactFormRequestConnection
  key: ID
}

type ContactFormRequestConnectionMessage {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionName {
  connection: ContactFormRequestConnection
  key: String
}

type ContactFormRequestConnectionUpdatedAt {
  connection: ContactFormRequestConnection
  key: DateTime
}

type ContactFormRequestConnection_id {
  connection: ContactFormRequestConnection
  key: ID
}

type ContactFormRequestGroupBy {
  _id: [ContactFormRequestConnection_id]
  createdAt: [ContactFormRequestConnectionCreatedAt]
  email: [ContactFormRequestConnectionEmail]
  id: [ContactFormRequestConnectionId]
  message: [ContactFormRequestConnectionMessage]
  name: [ContactFormRequestConnectionName]
  updatedAt: [ContactFormRequestConnectionUpdatedAt]
}

type Mutation {
  createContactFormRequest(input: createContactFormRequestInput): createContactFormRequestPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteContactFormRequest(input: deleteContactFormRequestInput): deleteContactFormRequestPayload
  "Delete one file"
  deleteFile(input: deleteFileInput): deleteFilePayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateContactFormRequest(input: updateContactFormRequestInput): updateContactFormRequestPayload
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID, source: String): UploadFile!
}

type Query {
  contactFormRequest(id: ID!, publicationState: PublicationState): ContactFormRequest
  contactFormRequests(
    limit: Int
    publicationState: PublicationState
    sort: String
    start: Int
    where: JSON
  ): [ContactFormRequest]
  contactFormRequestsConnection(limit: Int, sort: String, start: Int, where: JSON): ContactFormRequestConnection
  files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
  _id: ID!
  alternativeText: String
  caption: String
  createdAt: DateTime!
  ext: String
  formats: JSON
  hash: String!
  height: Int
  id: ID!
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  size: Float!
  updatedAt: DateTime!
  url: String!
  width: Int
}

type UploadFileAggregator {
  avg: UploadFileAggregatorAvg
  count: Int
  max: UploadFileAggregatorMax
  min: UploadFileAggregatorMin
  sum: UploadFileAggregatorSum
  totalCount: Int
}

type UploadFileAggregatorAvg {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMax {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorMin {
  height: Float
  size: Float
  width: Float
}

type UploadFileAggregatorSum {
  height: Float
  size: Float
  width: Float
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCaption {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionCreatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionFormats {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHeight {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionPreviewUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdatedAt {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionWidth {
  connection: UploadFileConnection
  key: Int
}

type UploadFileConnection_id {
  connection: UploadFileConnection
  key: ID
}

type UploadFileGroupBy {
  _id: [UploadFileConnection_id]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  createdAt: [UploadFileConnectionCreatedAt]
  ext: [UploadFileConnectionExt]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  height: [UploadFileConnectionHeight]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  size: [UploadFileConnectionSize]
  updatedAt: [UploadFileConnectionUpdatedAt]
  url: [UploadFileConnectionUrl]
  width: [UploadFileConnectionWidth]
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  _id: ID!
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  _id: ID!
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnection_id {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleGroupBy {
  _id: [UsersPermissionsRoleConnection_id]
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  _id: ID!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  role: UsersPermissionsRole
  updatedAt: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionCreatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionFirstName {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionLastName {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnection_id {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserGroupBy {
  _id: [UsersPermissionsUserConnection_id]
  createdAt: [UsersPermissionsUserConnectionCreatedAt]
  email: [UsersPermissionsUserConnectionEmail]
  firstName: [UsersPermissionsUserConnectionFirstName]
  id: [UsersPermissionsUserConnectionId]
  lastName: [UsersPermissionsUserConnectionLastName]
  role: [UsersPermissionsUserConnectionRole]
  updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
  username: [UsersPermissionsUserConnectionUsername]
}

type createContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type deleteFilePayload {
  file: UploadFile
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type updateContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum ENUM_COMPONENTMOLECULESLINK_ROLE {
  BugTracker
  DesignSystem
  SourceCode
}

enum PublicationState {
  LIVE
  PREVIEW
}

input ComponentAtomsCoverInput {
  backgroundColor: String!
  image: ID
}

input ComponentAtomsEntryInput {
  key: String!
  value: String!
}

input ComponentAtomsMarkdownInput {
  properties: JSON
  value: String
}

input ComponentAtomsTextInput {
  properties: JSON
  title: String!
}

input ComponentMoleculesLinkInput {
  icon: ID
  role: ENUM_COMPONENTMOLECULESLINK_ROLE
  title: ComponentAtomsTextInput
  url: String!
}

input ComponentMoleculesMapInput {
  children: [ComponentAtomsEntryInput]
}

input ComponentMoleculesParagraphInput {
  children: [ComponentAtomsTextInput]
}

input ContactFormRequestInput {
  created_by: ID
  email: String!
  message: String
  name: String!
  updated_by: ID
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  size: Float!
  updated_by: ID
  url: String!
  width: Int
}

input InputID {
  id: ID!
}

input RoleInput {
  created_by: ID
  description: String
  name: String!
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input UserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String!
  firstName: String!
  lastName: String!
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input createContactFormRequestInput {
  data: ContactFormRequestInput
}

input createRoleInput {
  data: RoleInput
}

input createUserInput {
  data: UserInput
}

input deleteContactFormRequestInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editComponentAtomsCoverInput {
  backgroundColor: String
  id: ID
  image: ID
}

input editComponentAtomsEntryInput {
  id: ID
  key: String
  value: String
}

input editComponentAtomsMarkdownInput {
  id: ID
  properties: JSON
  value: String
}

input editComponentAtomsTextInput {
  id: ID
  properties: JSON
  title: String
}

input editComponentMoleculesLinkInput {
  icon: ID
  id: ID
  role: ENUM_COMPONENTMOLECULESLINK_ROLE
  title: editComponentAtomsTextInput
  url: String
}

input editComponentMoleculesMapInput {
  children: [editComponentAtomsEntryInput]
  id: ID
}

input editComponentMoleculesParagraphInput {
  children: [editComponentAtomsTextInput]
  id: ID
}

input editContactFormRequestInput {
  created_by: ID
  email: String
  message: String
  name: String
  updated_by: ID
}

input editFileInput {
  alternativeText: String
  caption: String
  created_by: ID
  ext: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  size: Float
  updated_by: ID
  url: String
  width: Int
}

input editRoleInput {
  created_by: ID
  description: String
  name: String
  permissions: [ID]
  type: String
  updated_by: ID
  users: [ID]
}

input editUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  created_by: ID
  email: String
  firstName: String
  lastName: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  updated_by: ID
  username: String
}

input updateContactFormRequestInput {
  data: editContactFormRequestInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
